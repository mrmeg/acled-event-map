{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["map","mapData","markerArr","userCoords","userMarker","value","Map","getAcled","axios","get","then","response","console","log","data","acledData","catch","error","handleEventType","_this","clearMarkers","infoWindow","window","google","maps","InfoWindow","forEach","event_type","acledLat","Number","latitude","acledLng","longitude","marker","Marker","position","lat","lng","clickable","visible","push","contentString","concat","event_date","notes","source","fatalities","setContent","bindInfoWindow","content","handleFatalities","event","addListener","open","setMap","findDistance","acledCoords","geometry","spherical","computeDistanceBetween","toFixed","_this2","this","script","document","createElement","type","src","x","getElementsByTagName","parentNode","insertBefore","addEventListener","e","initMap","newProps","props","_this3","getElementById","id","zoom","center","gestureHandling","minZoom","handleUserClick","latLng","processAcled","location","getPosition","LatLng","react_default","a","style","Component","App","state","handleChange","setState","react","CssBaseline_default","index_es","onChange","indicatorColor","textColor","variant","scrollButtons","label","src_Map","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b6ef9d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nlet map;\n \nlet mapData = {\n  markerArr: [],\n  userCoords: {},\n  userMarker: [],\n  value: 'Click to Search'\n}\n\nclass Map extends Component {\n\n  componentWillMount() {\n    this.getAcled()\n    let script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = `https://maps.google.com/maps/api/js?key=AIzaSyAH1RNYnYcMHdOBEQHxml3yNiv4SLbgwCY&libraries=geometry`;\n    var x = document.getElementsByTagName('script')[0];\n    x.parentNode.insertBefore(script, x);\n    script.addEventListener('load', e => {\n      this.initMap()\n    })\n\n  } // end componentDidMount()\n\n  componentDidUpdate(newProps) {\n    if(mapData.acledData && newProps.value !== this.props.value) {\n      mapData.value = newProps.value\n      this.handleEventType(newProps.value)\n    }\n    if(mapData.acledData && newProps.value === 'fatalities') {\n      console.log(newProps.value)\n      this.handleFatalities(newProps.value)\n    }\n  }\n\n  getAcled = () => {\n    axios.get('https://api.acleddata.com/acled/read?terms=accept&limit=2000')\n      .then((response) => {\n        console.log(response.data.data)\n        mapData.acledData = response.data.data\n      })\n      .catch(error => {console.log(error)})\n  }\n\n  // Initializes the map and map functions\n  initMap() {\n\n  let options = {\n    zoom: 6,\n    center: {lat: 33.5177, lng: 36.2519},\n    gestureHandling: 'greedy',\n    minZoom: 3\n  }\n\n  map = new window.google.maps.Map(\n    document.getElementById(this.props.id),\n    options);\n\n  map.addListener('click', function(event) {\n    if(mapData.acledData && mapData.value === 'Click to Search') {\n      handleUserClick(event.latLng)\n      processAcled(event)\n    }\n  })\n\n  const handleUserClick = (location) => {\n    this.clearMarkers()\n\n    let userMarker = []\n    let marker = new window.google.maps.Marker({\n      position: location,\n      map: map,\n      visible: false\n    })\n\n    userMarker.push(marker)\n\n    let userCoords = {\n      lat: marker.getPosition().lat().toFixed(4),\n      lng: marker.getPosition().lng().toFixed(4)\n    }\n    console.log(`Lat: ${userCoords.lat} Lng: ${userCoords.lng}`)\n\n    mapData.userCoords = userCoords\n    mapData.userMarker = userMarker\n  } // close handleUserClick()\n\n  const processAcled = (event) => {\n    this.clearMarkers()\n    \n    let infoWindow = new window.google.maps.InfoWindow({});\n    let markerArr = [];\n    mapData.acledData.forEach((acledData) => {\n\n      let acledLat = Number(acledData.latitude);\n      let acledLng = Number(acledData.longitude);\n  \n      // Places markers on the map\n      var marker = new window.google.maps.Marker({\n        position: {lat: acledLat, lng: acledLng},\n        map: map,\n        clickable: true,\n        visible: false,\n      });\n\n      let contentString = '<div class=\"infoWindow\">' +\n        `<p class=\"eventType\">Event Type: ${acledData.event_type}</p>` +\n        `<p class=\"eventDate\">Date: ${acledData.event_date}</p>` +\n        `<p class=\"description\">Description: ${acledData.notes}</p>` +\n        `<p class=\"source\">Source: ${acledData.source}</p>` +\n        `<p class=\"fatalities\">Fatalities: ${acledData.fatalities}</p>` +\n        `</div>`;\n\n        infoWindow.setContent(contentString);\n        this.bindInfoWindow(marker, map, infoWindow, infoWindow.content);\n\n        let acledCoords = new window.google.maps.LatLng(acledData.latitude, acledData.longitude)\n\n        let distance = Number(this.findDistance(event.latLng, acledCoords))\n\n        if(distance < 250) {\n          markerArr.push(marker)\n          marker.visible = true;\n          mapData.markerArr = markerArr\n        }\n    })\n  } // close processAcled()\n\n  } // close initMap()\n\n  handleEventType = (value) => {\n    this.clearMarkers()\n    let markerArr = []\n    let infoWindow = new window.google.maps.InfoWindow({})\n\n    mapData.acledData.forEach((acledData) => {\n      if(acledData.event_type === value) {\n        \n        let acledLat = Number(acledData.latitude);\n        let acledLng = Number(acledData.longitude);\n\n        let marker = new window.google.maps.Marker({\n          position: {lat: acledLat, lng: acledLng},\n          map: map,\n          clickable: true,\n          visible: true,\n        });\n\n        markerArr.push(marker)\n        mapData.markerArr = markerArr;\n\n        let contentString = '<div class=\"infoWindow\">' +\n        `<p class=\"eventType\">Event Type: ${acledData.event_type}</p>` +\n        `<p class=\"eventDate\">Date: ${acledData.event_date}</p>` +\n        `<p class=\"description\">Description: ${acledData.notes}</p>` +\n        `<p class=\"source\">Source: ${acledData.source}</p>` +\n        `<p class=\"fatalities\">Fatalities: ${acledData.fatalities}</p>` +\n        `</div>`;\n\n          infoWindow.setContent(contentString);\n          this.bindInfoWindow(marker, window.map, infoWindow, infoWindow.content);\n      }\n    })\n\n  } // Close handleSelect()\n\n  handleFatalities = () => {\n    this.clearMarkers()\n    let markerArr = []\n    let infoWindow = new window.google.maps.InfoWindow({})    \n    \n    mapData.acledData.forEach((acledData) => {\n      if(acledData.fatalities !== \"0\") {\n        \n        let acledLat = Number(acledData.latitude);\n        let acledLng = Number(acledData.longitude);\n\n        let marker = new window.google.maps.Marker({\n          position: {lat: acledLat, lng: acledLng},\n          map: map,\n          clickable: true,\n          visible: true,\n        });\n\n        markerArr.push(marker)\n        mapData.markerArr = markerArr;\n\n        let contentString = '<div class=\"infoWindow\">' +\n        `<p class=\"eventType\">Event Type: ${acledData.event_type}</p>` +\n        `<p class=\"eventDate\">Date: ${acledData.event_date}</p>` +\n        `<p class=\"description\">Description: ${acledData.notes}</p>` +\n        `<p class=\"source\">Source: ${acledData.source}</p>` +\n        `<p class=\"fatalities\">Fatalities: ${acledData.fatalities}</p>` +\n        `</div>`;\n\n          infoWindow.setContent(contentString);\n          this.bindInfoWindow(marker, window.map, infoWindow, infoWindow.content);\n      }\n    })\n  } // Close handleFatalities()\n\n  // Attach InfoWindows to markers\n  bindInfoWindow = (marker, map, infoWindow, content) => {\n    window.google.maps.event.addListener(marker, 'click', function() {\n      infoWindow.setContent(content);\n      infoWindow.open(map, marker);\n    });\n  };\n\n  clearMarkers = () => {\n    mapData.markerArr.forEach((marker) => {\n      marker.setMap(null)\n    });\n  }\n\n  //  Finds distance for radial search  \n  findDistance = (userCoords, acledCoords) => {\n    let distance = (window.google.maps.geometry.spherical.computeDistanceBetween(userCoords, acledCoords) / 1000).toFixed(2);\n\n    return distance;\n  }; // Close findDistance()\n\n  render() {\n    return (\n      <div style={this.props.style} id={this.props.id}></div>\n    );\n  }\n}\n\nexport default Map","import React, { Component, Fragment } from 'react';\nimport Map from './Map'\nimport './App.css'\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { Tabs, Tab } from '@material-ui/core'\n\nclass App extends Component {\n\n  state = {\n    id: 'map',\n    value: 'Click to Search'\n  } \n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <Fragment>\n        <CssBaseline>\n          <Tabs\n            id='appBar'\n            value={value}\n            onChange={this.handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n          >\n            <Tab label=\"All Events Within 250km of Mouse Click\"\n                 value=\"Click to Search\" />\n            <Tab label=\"Riots/Protests\"\n                 value=\"Riots/Protests\" />\n            <Tab label=\"Remote violence\"\n                 value=\"Remote violence\" />\n            <Tab label=\"Strategic development\" \n                 value=\"Strategic development\" />\n            <Tab label=\"Incidents with Fatalities\"\n                 value=\"fatalities\" />\n            <Tab label=\"Battle: No change of territory\" \n                 value=\"Battle-No change of territory\"/>\n            <Tab label=\"Battle: Non-state actor overtakes territory\"\n                 value=\"Battle-Non-state actor overtakes territory\" />\n            <Tab label=\"Battle: Government regains territory\"\n                 value=\"Battle-Government regains territory\" />\n          </Tabs>\n        <Map value={this.state.value} \n             id={this.state.id}\n        />\n      </CssBaseline>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}